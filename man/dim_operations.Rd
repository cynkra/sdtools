% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dim_operations.R
\name{dim_operations}
\alias{dim_operations}
\alias{dim_add}
\alias{dim_drop}
\alias{dim_rename}
\title{Swissdata Dimension Operations}
\usage{
dim_add(x, dim = "geo", level = "0", label = level)

dim_drop(x, dim = "trans", level = "ind")

dim_rename(x, dim, name)
}
\arguments{
\item{x}{swissdata object}

\item{dim}{dimension name}

\item{level}{single level ID from \code{dim}}

\item{label}{English label for the newly added dimension}

\item{name}{new dimension name}
}
\value{
a modified swissdata object
}
\description{
A set of functions for manipulating dimensions of swissdata objects.
}
\details{
\code{dim_add} adds an additional dimension to a swissdata object, \code{dim_drop}
removes a dimension, \code{dim_rename} renames an existing dimension.

Internally these functions incorporate the requested changes into a given
swissdata object by altering the \code{x$data}, \code{x$meta$hierarchy},
\code{x$meta$labels}, \code{x$meta$units}, and \code{x$meta$dim_order} fields.

When removing the dimesnion using \code{dim_drop} only the rows corresponding to
provided level argument are retained in \code{x$data}.
}
\examples{
# add new dimension "new_dim"
z <- adecco
str(z)
z <- dim_add(z, dim = "new_dim", level = "nd", label = "newly added dim")
str(z)

# rename the newly added dimension to "dim2"
z <- dim_rename(z, dim = "new_dim", name = "dim2")
str(z)

# drop existing dimension idx_type (collapse to level "sch")
z <- dim_drop(z, dim = "idx_type", level = "sch")
str(z)

}
\author{
Christoph Sax
}
